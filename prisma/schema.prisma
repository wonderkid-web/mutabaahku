generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model teacher {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  class_id     Int?
  created_at   DateTime?     @default(now()) @db.Timestamp(6)
  Renamedclass Renamedclass? @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model hafalan {
  id          Int       @id(map: "mutabaah_pkey") @default(autoincrement())
  student_id  Int?
  surah       String    @db.VarChar(255)
  page_number Int
  ayah        Json
  notes       String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  student     student?  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mutabaah_student_id_fkey")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model murojah {
  id          Int       @id @default(autoincrement())
  student_id  Int?
  surah       String    @db.VarChar(255)
  page_number Int
  ayah        Json
  notes       String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  student     student?  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model student {
  id           Int          @id @default(autoincrement())
  class_id     Int
  name         String       @db.VarChar(255)
  total_ayat   Int?         @default(0)
  total_juz    Int?         @default(0)
  status       Int          @default(0) @db.SmallInt
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  teacher_id   String?
  parent       User?
  hafalan      hafalan[]
  murojah      murojah[]
  Renamedclass Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          String?
  schoolOrigin  String?
  classId       Int?
  studentId     Int?            @unique
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]

  class Renamedclass? @relation(fields: [classId], references: [id])

  student student? @relation(fields: [studentId], references: [id])
}

/// This model has been renamed to 'Renamedclass' during introspection, because the original name 'class' is reserved.
model Renamedclass {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      User[]
  student    student[]
  teacher    teacher[]

  @@map("class")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
